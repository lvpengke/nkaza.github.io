paste(ctys_spdf$County_Name, ctys_spdf$State_Name, sep=","),ctys_spdf$percAQIgt100
) %>% lapply(htmltools::HTML)
m <-  leaflet(ctys_spdf) %>%
addProviderTiles(providers$Stamen.TonerLines, group = "Basemap") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Basemap") %>%
addPolygons(color = "#CBC7C6", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = Qpal(ctys_spdf$percAQIgt100),
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
group = "Counties"
)
addLayersControl(
overlayGroups = c("Monitors", 'Basemap'),
options = layersControlOptions(collapsed = FALSE)
)
m
nrow(ctys_spdf@data)
Qpal <- colorQuantile(
palette = "BuPu", n = 5,
domain = ctys_spdf$percAQIgt100
)
labels <- sprintf(
"County: %s <br/> Prop AQI>100 days: <strong>%s</strong>",
paste(ctys_spdf$County_Name, ctys_spdf$State_Name, sep=","),ctys_spdf$percAQIgt100
) %>% lapply(htmltools::HTML)
m <-  leaflet(ctys_spdf) %>%
addProviderTiles(providers$Stamen.TonerLines, group = "Basemap") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Basemap") %>%
addPolygons(color = "#CBC7C6", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = Qpal(ctys_spdf$percAQIgt100),
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
group = "Counties"
)
addLayersControl(
overlayGroups = c("Monitors", 'Basemap'),
options = layersControlOptions(collapsed = FALSE)
)
m
?colorNumeric
Bpal <- colorBin(
palette = "BuPu", n = 7,
domain = ctys_spdf$percAQIgt100
)
labels <- sprintf(
"County: %s <br/> Prop AQI>100 days: <strong>%s</strong>",
paste(ctys_spdf$County_Name, ctys_spdf$State_Name, sep=","),ctys_spdf$percAQIgt100
) %>% lapply(htmltools::HTML)
m <-  leaflet(ctys_spdf) %>%
addProviderTiles(providers$Stamen.TonerLines, group = "Basemap") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Basemap") %>%
addPolygons(color = "#CBC7C6", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = Bpal(ctys_spdf$percAQIgt100),
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
group = "Counties"
)
addLayersControl(
overlayGroups = c("Monitors", 'Basemap'),
options = layersControlOptions(collapsed = FALSE)
)
m
m <-  leaflet(ctys_spdf) %>%
addProviderTiles(providers$Stamen.TonerLines, group = "Basemap") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Basemap") %>%
addPolygons(color = "#CBC7C6", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = Bpal(ctys_spdf$percAQIgt100),
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
group = "Counties"
)%>%
addLayersControl(
overlayGroups = c("Monitors", 'Basemap'),
options = layersControlOptions(collapsed = FALSE)
)
m
Bpal <- colorBin(
palette = "BuPu", n = 15,
domain = ctys_spdf$percAQIgt100
)
labels <- sprintf(
"County: %s <br/> Prop AQI>100 days: <strong>%s</strong>",
paste(ctys_spdf$County_Name, ctys_spdf$State_Name, sep=","),ctys_spdf$percAQIgt100
) %>% lapply(htmltools::HTML)
m <-  leaflet(ctys_spdf) %>%
addProviderTiles(providers$Stamen.TonerLines, group = "Basemap") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Basemap") %>%
addPolygons(color = "#CBC7C6", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = Bpal(ctys_spdf$percAQIgt100),
highlightOptions = highlightOptions(color = "white", weight = 2, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
group = "Counties"
)%>%
addLayersControl(
overlayGroups = c("Counties", 'Basemap'),
options = layersControlOptions(collapsed = FALSE)
)
m
quantile(ctys_spdf$percAQIgt100, 5)
quantile(ctys_spdf$percAQIgt100, seq(.1,1,.1))
Qpal <- colorQpal(
palette = "BuPu", n = 4,
domain = ctys_spdf$percAQIgt100[ctys_spdf$percAQIgt100>0]
)
Qpal <- colorQuantile(
palette = "BuPu", n = 4,
domain = ctys_spdf$percAQIgt100[ctys_spdf$percAQIgt100>0]
)
labels <- sprintf(
"County: %s <br/> Prop AQI>100 days: <strong>%s</strong>",
paste(ctys_spdf$County_Name, ctys_spdf$State_Name, sep=","),ctys_spdf$percAQIgt100
) %>% lapply(htmltools::HTML)
m <-  leaflet(ctys_spdf) %>%
addProviderTiles(providers$Stamen.TonerLines, group = "Basemap") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Basemap") %>%
addPolygons(color = "#CBC7C6", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = Bpal(ctys_spdf$percAQIgt100),
highlightOptions = highlightOptions(color = "green", weight = 2, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
group = "Counties"
)%>%
addLayersControl(
overlayGroups = c("Counties", 'Basemap'),
options = layersControlOptions(collapsed = FALSE)
)
m
colorQuantile
?colorQuantile
labels <- sprintf(
"County: %s <br/> Prop AQI>100 days: <strong>%s</strong>",
paste(ctys_spdf$County_Name, ctys_spdf$State_Name, sep=","),ctys_spdf$percAQIgt100
) %>% lapply(htmltools::HTML)
m <-  leaflet(ctys_spdf) %>%
addProviderTiles(providers$Stamen.TonerLines, group = "Basemap") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Basemap") %>%
addPolygons(color = "#CBC7C6", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = Bpal(ctys_spdf$percAQIgt100),
highlightOptions = highlightOptions(color = "green", weight = 2, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
group = "Counties"
)%>%
addLayersControl(
overlayGroups = c("Counties", 'Basemap'),
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend("topleft", pal = Qpal, values = ~C000,
labFormat = function(type, cuts, p) {
n = length(cuts)
paste0(prettyNum(cuts[-n], digits=0, big.mark = ",", scientific=F), " - ", prettyNum(cuts[-1], digits=0, big.mark=",", scientific=F))
m
)
m <-  leaflet(ctys_spdf) %>%
addProviderTiles(providers$Stamen.TonerLines, group = "Basemap") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Basemap") %>%
addPolygons(color = "#CBC7C6", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = Bpal(ctys_spdf$percAQIgt100),
highlightOptions = highlightOptions(color = "green", weight = 2, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
group = "Counties"
)%>%
addLegend("topleft", pal = Qpal, values = ~C000,
labFormat = function(type, cuts, p) {
n = length(cuts)
paste0(prettyNum(cuts[-n], digits=0, big.mark = ",", scientific=F), " - ", prettyNum(cuts[-1], digits=0, big.mark=",", scientific=F))
},
title = "Number of Jobs",
opacity = 1
)%>%
addLayersControl(
overlayGroups = c("Counties", 'Basemap'),
options = layersControlOptions(collapsed = FALSE)
) %>%
m
labels <- sprintf(
"County: %s <br/> Prop AQI>100 days: <strong>%s</strong>",
paste(ctys_spdf$County_Name, ctys_spdf$State_Name, sep=","),ctys_spdf$percAQIgt100
) %>% lapply(htmltools::HTML)
m <-  leaflet(ctys_spdf) %>%
addProviderTiles(providers$Stamen.TonerLines, group = "Basemap") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Basemap") %>%
addPolygons(color = "#CBC7C6", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = Bpal(ctys_spdf$percAQIgt100),
highlightOptions = highlightOptions(color = "green", weight = 2, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
group = "Counties"
)%>%
addLegend("topleft", pal = Qpal, values = ~percAQIgt100,
labFormat = function(type, cuts, p) {
n = length(cuts)
paste0(prettyNum(cuts[-n], digits=3, big.mark = ",", scientific=F), " - ", prettyNum(cuts[-1], digits=3, big.mark=",", scientific=F))
},
title = "Prop of day with AQI >100",
opacity = 1
)%>%
addLayersControl(
overlayGroups = c("Counties", 'Basemap'),
options = layersControlOptions(collapsed = FALSE)
) %>%
m
m <-  leaflet(ctys_spdf) %>%
addProviderTiles(providers$Stamen.TonerLines, group = "Basemap") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Basemap") %>%
addPolygons(color = "#CBC7C6", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = Bpal(ctys_spdf$percAQIgt100),
highlightOptions = highlightOptions(color = "green", weight = 2, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
group = "Counties"
)%>%
addLayersControl(
overlayGroups = c("Counties", 'Basemap'),
options = layersControlOptions(collapsed = FALSE)
) %>%
m <-  leaflet(ctys_spdf) %>%
addProviderTiles(providers$Stamen.TonerLines, group = "Basemap") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Basemap") %>%
addPolygons(color = "#CBC7C6", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = Bpal(ctys_spdf$percAQIgt100),
highlightOptions = highlightOptions(color = "green", weight = 2, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
group = "Counties"
)%>%
addLegend("topleft", pal = Qpal, values = ~percAQIgt100,
labFormat = function(type, cuts, p) {
n = length(cuts)
paste0(prettyNum(cuts[-n], digits=3, big.mark = ",", scientific=F), " - ", prettyNum(cuts[-1], digits=3, big.mark=",", scientific=F))
},
title = "Prop of day with AQI >100",
opacity = 1
)%>%
addLayersControl(
overlayGroups = c("Counties", 'Basemap'),
options = layersControlOptions(collapsed = FALSE)
)
m
labels <- sprintf(
"County: %s <br/> Prop AQI>100 days: <strong>%s</strong>",
paste(ctys_spdf$County_Name, ctys_spdf$State_Name, sep=","),ctys_spdf$percAQIgt100
) %>% lapply(htmltools::HTML)
m <-  leaflet(ctys_spdf) %>%
addProviderTiles(providers$Stamen.TonerLines, group = "Basemap") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Basemap") %>%
addPolygons(color = "#CBC7C6", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = Bpal(ctys_spdf$percAQIgt100),
highlightOptions = highlightOptions(color = "green", weight = 2, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
group = "Counties"
)%>%
addLayersControl(
overlayGroups = c("Counties", 'Basemap'),
options = layersControlOptions(collapsed = FALSE)
)
m
labels <- sprintf(
"County: %s <br/> Prop AQI>100 days: <strong>%s</strong>",
paste(ctys_spdf$County_Name, ctys_spdf$State_Name, sep=","),prettyNum(ctys_spdf$percAQIgt100*100, digits=2)
) %>% lapply(htmltools::HTML)
m <-  leaflet(ctys_spdf) %>%
addProviderTiles(providers$Stamen.TonerLines, group = "Basemap") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Basemap") %>%
addPolygons(color = "#CBC7C6", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = Bpal(ctys_spdf$percAQIgt100),
highlightOptions = highlightOptions(color = "green", weight = 2, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
group = "Counties"
)%>%
addLayersControl(
overlayGroups = c("Counties", 'Basemap'),
options = layersControlOptions(collapsed = FALSE)
)
m
m <- ggplotly(m)
shared_DF <- SharedData$new(ctys_spdf)
library(crosstalk)
shared_DF <- SharedData$new(ctys_spdf)
m <-  leaflet(shared_DF) %>%
addProviderTiles(providers$Stamen.TonerLines, group = "Basemap") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Basemap") %>%
addPolygons(color = "#CBC7C6", weight = 1, smoothFactor = 0.5,
opacity = 1.0, fillOpacity = 0.5,
fillColor = Bpal(ctys_spdf$percAQIgt100),
highlightOptions = highlightOptions(color = "green", weight = 2, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"),
group = "Counties"
)%>%
addLayersControl(
overlayGroups = c("Counties", 'Basemap'),
options = layersControlOptions(collapsed = FALSE)
)
m
b <- shared_DF%>%
top_n(25, percAQIgt100) %>%
ggplot()+
geom_col(aes(x=reorder(paste(County_Name, State_Name, sep=","), percAQIgt100), y=percAQIgt100, fill=State_Name)) +
scale_fill_brewer(palette = "Dark2", name="State") +
coord_flip()+
labs(y="Proportion of days with Ozone AQI greater than 100", x="County", Title="Top 25 polluted counties")+
theme_minimal()
b <- ggplotly(g2, tooltip = c("y"))
b <- shared_DF%>%
ggplot()+
geom_col(aes(x=reorder(paste(County_Name, State_Name, sep=","), percAQIgt100), y=percAQIgt100, fill=State_Name)) +
scale_fill_brewer(palette = "Dark2", name="State") +
coord_flip()+
labs(y="Proportion of days with Ozone AQI greater than 100", x="County", Title="Top 25 polluted counties")+
theme_minimal()
b <- ggplotly(g2, tooltip = c("y"))
bscols(m,b) #Using Bootstrap framework
b <- shared_DF%>%
ggplot()+
geom_col(aes(x=reorder(stcofips, percAQIgt100), y=percAQIgt100, fill=State_Name)) +
scale_fill_brewer(palette = "Dark2", name="State") +
coord_flip()+
labs(y="Proportion of days with Ozone AQI greater than 100", x="County")+
theme_minimal()
b <- ggplotly(g2, tooltip = c("y"))
b
b <- shared_DF%>%
ggplot()+
geom_col(aes(x=reorder(stcofips, percAQIgt100), y=percAQIgt100, fill=State_Name), show.legend = FALSE) +
scale_fill_brewer(palette = "Dark2", name="State") +
coord_flip()+
labs(y="Proportion of days with Ozone AQI greater than 100", x="County")+
theme_minimal()
b <- ggplotly(g2, tooltip = c("y"))
b
b <- shared_DF%>%
ggplot()+
geom_col(aes(x=reorder(stcofips, percAQIgt100), y=percAQIgt100, fill=State_Name), show.legend = FALSE) +
scale_fill_brewer(palette = "Dark2", name="State") +
coord_flip()+
labs(y="Proportion of days with Ozone AQI greater than 100", x="County")+
theme_minimal()
b
b <- shared_DF%>%
ggplot()+
geom_col(aes(x=reorder(stcofips, percAQIgt100), y=percAQIgt100, fill=State_Name), show.legend = FALSE) +
scale_fill_brewer(palette = "Dark2", name="State") +
coord_flip()+
labs(y="Proportion of days with Ozone AQI greater than 100", x="County")+
theme_minimal()
b <- ggplotly(g2, tooltip = c("y"))
b
b <- shared_DF%>%
ggplot()+
geom_col(aes(x=reorder(stcofips, percAQIgt100), y=percAQIgt100, fill=State_Name)) +
scale_fill_brewer(palette = "Dark2", name="State") +
coord_flip()+
labs(y="Proportion of days with Ozone AQI greater than 100", x="County")+
theme_minimal(legend.position="none")
b <- ggplotly(b, tooltip = c("y"))
b <- shared_DF%>%
ggplot()+
geom_col(aes(x=reorder(stcofips, percAQIgt100), y=percAQIgt100, fill=State_Name)) +
scale_fill_brewer(palette = "Dark2", name="State") +
coord_flip()+
labs(y="Proportion of days with Ozone AQI greater than 100", x="County")+
theme(legend.position="none")
b <- ggplotly(b, tooltip = c("y"))
shared_DF
b <- shared_DF%>%
ggplot()+
geom_col(aes(x=reorder(stcofips, percAQIgt100), y=percAQIgt100, fill=State_Name)) +
scale_fill_brewer(palette = "Dark2", name="State") +
coord_flip()+
labs(y="Proportion of days with Ozone AQI greater than 100", x="County")+
theme(legend.position="none")
b <- ggplotly(b, tooltip = c("y"))
b <- shared_DF%>%
ggplot()+
geom_col(aes(x=reorder(stcofips, percAQIgt100), y=percAQIgt100, fill=State_Name)) +
scale_fill_brewer(palette = "Dark2", name="State") +
coord_flip()+
labs(y="Proportion of days with Ozone AQI greater than 100", x="County")+
theme(legend.position="none")
b
sessionInfo()
b <- shared_DF%>%
plot_ly(x = ~reorder(stcofips, percAQIgt100), y = ~percAQIgt100, fill=~State.name)
b
library(tidyverse)
library(sf)
library(leaflet)
library(plotly)
library(osrm)
setwd('/Users/kaza/Dropbox/Wuhan_tutorials/datasets/2.geospatialR')
tripdata <- read_csv('201806-citibike-tripdata.csv')
tripdata <- rename(tripdata,
Slat = `start station latitude`,
Slon = `start station longitude`,
Elat = `end station latitude`,
Elon = `end station longitude`,
Sstid = `start station id`,
Estid = `end station id`,
Estname = `end station name`,
Sstname = `start station name`
)
start_loc <- unique(tripdata[,c('Slon', 'Slat', "Sstid", 'Sstname')]) %>% rename(Longitude = Slon, Latitude = Slat, Stid = Sstid, Stname=Sstname)
end_loc <- unique(tripdata[,c('Elon', 'Elat', 'Estid', 'Estname')]) %>% rename(Longitude = Elon, Latitude = Elat, Stid = Estid, Stname=Estname)
station_loc <- unique(rbind(start_loc, end_loc))
leaflet(station_loc) %>%
addProviderTiles(providers$Stamen.TonerLines, group = "Basemap") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Basemap") %>%
addMarkers(label = paste(station_loc$Longitude, station_loc$Latitude, sep=",")
)
#Looks like there are some stations in Montreal... Whats up with that?
tripdata[tripdata$Slat>41,]
tripdata[tripdata$Slat>41,] %>% nrow()
tripdata[tripdata$Elat>41,] %>% nrow()
tripdata[tripdata$Sstid == tripdata$Estid,] %>% nrow()
tripdata[tripdata$Sstid == tripdata$Estid,] %>% summary()
summary(tripdata)
tripdata[which.max(tripdata$tripduration),]
(Bikedepots <- station_loc[grep(glob2rx("*CBS*"), station_loc$Stname),]$Stid)
tripdata[tripdata$Estid %in% Bikedepots |tripdata$Sstid %in% Bikedepots, ] %>% nrow()
tripdata <- tripdata[!(tripdata$Estid %in% Bikedepots |tripdata$Sstid %in% Bikedepots), ]
tripdata <- tripdata[!(tripdata$Elat > 41 | tripdata$Slat > 41),]
samedesttrips <- tripdata[tripdata$Estid == tripdata$Sstid,]
nrow(samedesttrips)
samedesttrips[which.max(samedesttrips$tripduration),]
diffdesttrips <- tripdata[tripdata$Estid != tripdata$Sstid, ]
getwd()
?writeOGR
library(rgdal)
?writeOGR
unique_od_pairs <- diffdesttrips[!duplicated(diffdesttrips[,c('Sstid','Estid')]), c('Sstid', 'Slon', 'Slat', 'Estid', 'Elon', 'Elat')]
unique_od_pairs <- diffdesttrips[!duplicated(diffdesttrips[,c('Sstid','Estid')]), c('Sstid', 'Slon', 'Slat', 'Estid', 'Elon', 'Elat')]
options(osrm.server = "http://localhost:5000/", osrm.profile = "cycling")
k <- osrmRoute(src=unique_od_pairs[i,c('Sstid', 'Slon', 'Slat')] , dst=unique_od_pairs[i,c('Estid','Elon','Elat')], overview = "full", sp = TRUE)
fastest_od_routes <- list()
for(i in 1:nrow(unique_od_pairs)){
try(fastest_od_routes[[i]] <- osrmRoute(src=unique_od_pairs[i,c('Sstid', 'Slon', 'Slat')] , dst=unique_od_pairs[i,c('Estid','Elon','Elat')], overview = "full", sp = TRUE))
}
sapply(fastest_od_routes, is.null) %>% sum()
fastest_od_routes2 <- do.call(fastest_od_routes)
writeOGR(fastest_od_routes2, dsn=".", layer="od_cycling_routes", driver="ESRI Shapefile")
rm(fastest_od_routes)
fastest_od_routes <- list()
for(i in 1:nrow(unique_od_pairs)){
try(fastest_od_routes[[i]] <- osrmRoute(src=unique_od_pairs[i,c('Sstid', 'Slon', 'Slat')] , dst=unique_od_pairs[i,c('Estid','Elon','Elat')], overview = "full", sp = TRUE))
}
sapply(fastest_od_routes, is.null) %>% sum()
fastest_od_routes2 <- do.call(rbind, fastest_od_routes)
writeOGR(fastest_od_routes2, dsn=".", layer="od_cycling_routes", driver="ESRI Shapefile")
